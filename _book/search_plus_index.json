{"./":{"url":"./","title":"Introduction","keywords":"","body":"Introduction2 ©chesty all right reserved，powered by Gitbook文档更新时间： 2022-07-12 10:50:42 "},"deploy/":{"url":"deploy/","title":"linux 基础服务部署","keywords":"","body":"Introduction ©chesty all right reserved，powered by Gitbook文档更新时间： 2022-07-11 14:11:50 "},"deploy/docker.html":{"url":"deploy/docker.html","title":"Docker安装","keywords":"","body":" 安装yum-utils： yum install -y yum-utils device-mapper-persistent-data lvm2 为yum源添加docker仓库位置： yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo 安装docker： yum install docker-ce 启动docker： systemctl start docker 设置开机重启 systemctl enable docker.service 更新容器的重启策略 docker update --restart=always f361b7d8465 如果你的harbor服务器是http访问,那么修改registry为http vim /etc/docker/daemon.json {\"insecure-registries\":[\"填你的harbor服务器地址\"]} systemctl daemon-reload systemctl restart docker ©chesty all right reserved，powered by Gitbook文档更新时间： 2022-07-12 11:14:22 "},"deploy/mysql.html":{"url":"deploy/mysql.html","title":"MySQL安装","keywords":"","body":"MySQL安装 下载MySQL5.7的docker镜像： docker pull mysql:5.7 使用如下命令启动MySQL服务： docker run -p 3306:3306 --name mysql \\ -v /mydata/mysql/log:/var/log/mysql \\ -v /mydata/mysql/data:/var/lib/mysql \\ -v /mydata/mysql/conf:/etc/mysql \\ -e MYSQL_ROOT_PASSWORD=root \\ -d mysql:5.7 参数说明 -p 3306:3306：将容器的3306端口映射到主机的3306端口 -v /mydata/mysql/conf:/etc/mysql：将配置文件夹挂在到主机 --v /mydata/mysql/log:/var/log/mysql：将日志文件夹挂载到主机 -v /mydata/mysql/data:/var/lib/mysql/：将数据文件夹挂载到主机 -e MYSQL_ROOT_PASSWORD=root：初始化root用户的密码 进入运行MySQL的docker容器： docker exec -it mysql /bin/bash 使用MySQL命令打开客户端： mysql -uroot -proot --default-character-set=utf8 创建mall数据库： create database mall character set utf8 安装上传下载插件 yum -y install lrzsz 创建一个reader:123456帐号并修改权限，使得任何ip都能访问： rant all privileges on *.* to 'reader' @'%' identified by '123456'; ©chesty all right reserved，powered by Gitbook文档更新时间： 2022-07-12 11:19:45 "},"deploy/redis.html":{"url":"deploy/redis.html","title":"Redis安装","keywords":"","body":"Redis安装 下载Redis5.0的docker镜像： docker pull redis:5 使用如下命令启动Redis服务： docker run -p 6379:6379 --name redis \\ -v /mydata/redis/data:/data \\ -d redis:5 redis-server --appendonly yes 进入Redis容器使用redis-cli命令进行连接： docker exec -it redis redis-cli ©chesty all right reserved，powered by Gitbook文档更新时间： 2022-07-12 11:24:34 "},"deploy/nginx.html":{"url":"deploy/nginx.html","title":"Nginx安装","keywords":"","body":"Nginx安装 下载Nginx1.10的docker镜像： docker pull nginx:1.10 先运行一次容器（为了拷贝配置文件）： docker run -p 80:80 --name nginx \\ -v /mydata/nginx/html:/usr/share/nginx/html \\ -v /mydata/nginx/logs:/var/log/nginx \\ -d nginx:1.10 将容器内的配置文件拷贝到指定目录： docker container cp nginx:/etc/nginx /mydata/nginx/ 修改文件名称： mv nginx conf 终止并删除容器： docker stop nginx docker rm nginx 使用如下命令启动Nginx服务： docker run -p 80:80 --name nginx \\ -v /mydata/nginx/html:/usr/share/nginx/html \\ -v /mydata/nginx/logs:/var/log/nginx \\ -v /mydata/nginx/conf:/etc/nginx \\ -d nginx:1.10 ©chesty all right reserved，powered by Gitbook文档更新时间： 2022-07-12 11:25:24 "},"deploy/rabbitmq.html":{"url":"deploy/rabbitmq.html","title":"RabbitMQ安装","keywords":"","body":"RabbitMQ安装 下载rabbitmq3.7.15的docker镜像： docker pull rabbitmq:3.7.15 使用如下命令启动RabbitMQ服务： docker run -p 5672:5672 -p 15672:15672 --name rabbitmq \\ -d rabbitmq:3.7.15 进入容器并开启管理功能： docker exec -it rabbitmq /bin/bash rabbitmq-plugins enable rabbitmq_management 开启防火墙： firewall-cmd --zone=public --add-port=15672/tcp --permanent firewall-cmd --reload 访问地址查看是否安装成功：http://192.168.3.101:15672 输入账号密码并登录：guest guest 创建帐号并设置其角色为管理员：mall mall 创建一个新的虚拟host为：/mall 点击mall用户进入用户配置页面 给mall用户配置该虚拟host的权限 命令行批量删除 关闭应用的命令为： rabbitmqctl stop_app 清除的命令为： rabbitmqctl reset 重新启动命令为： rabbitmqctl start_app ps 查看所有队列命令： rabbitmqctl list_queues ©chesty all right reserved，powered by Gitbook文档更新时间： 2022-07-12 11:47:15 "},"deploy/es.html":{"url":"deploy/es.html","title":"Elasticsearch安装","keywords":"","body":"Elasticsearch安装 下载Elasticsearch7.6.2的docker镜像： docker pull elasticsearch:7.6.2 修改虚拟内存区域大小，否则会因为过小而无法启动: sysctl -w vm.max_map_count=262144 使用如下命令启动Elasticsearch服务： docker run -p 9200:9200 -p 9300:9300 --name elasticsearch \\ -e \"discovery.type=single-node\" \\ -e \"cluster.name=elasticsearch\" \\ -v /mydata/elasticsearch/plugins:/usr/share/elasticsearch/plugins \\ -v /mydata/elasticsearch/data:/usr/share/elasticsearch/data \\ -d elasticsearch:7.6.2 启动时会发现/usr/share/elasticsearch/data目录没有访问权限，只需要修 改/mydata/elasticsearch/data目录的权限，再重新启动即可； chmod 777 /mydata/elasticsearch/data/ 安装中文分词器IKAnalyzer，并重新启动： docker exec -it elasticsearch /bin/bash #此命令需要在容器中运行 elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.6.2/elasticsearch-analysis-ik-7.6.2.zip docker restart elasticsearch 开启防火墙： firewall-cmd --zone=public --add-port=9200/tcp --permanent firewall-cmd --reload 访问会返回版本信息：http://192.168.3.101:9200 ©chesty all right reserved，powered by Gitbook文档更新时间： 2022-07-12 11:26:56 "},"deploy/compose.html":{"url":"deploy/compose.html","title":"使用Docker Compose部署","keywords":"","body":"使用Docker Compose部署 下载Docker Compose curl -L https://get.daocloud.io/docker/compose/releases/download/1.24.0/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose 修改该文件的权限为可执行 chmod +x /usr/local/bin/docker-compose 查看是否已经安装成功 docker-compose --version 使用Docker Compose的步骤 使用Dockerfile定义应用程序环境，一般需要修改初始镜像行为时才需要使用； 使用docker-compose.yml定义需要部署的应用程序服务，以便执行脚本一次性部署； 使用docker-compose up命令将所有应用服务一次性部署起来。 Docker Compose常用命令 构建、创建、启动相关容器 # -d表示在后台运行 docker-compose up -d 指定文件启动 docker-compose -f docker-compose.yml up -d 停止所有相关容器 docker-compose stop 列出所有容器信息 docker-compose ps 使用Docker Compose部署应用 编写docker-compose.yml文件 Docker Compose将所管理的容器分为三层，工程、服务及容器。docker-compose.yml中定义所有服务组成了一个工程，services节点下即为服务，服务之下为容器。容器与容器直之间可以以服务名称为域名进行访问，比如在mall-tiny-docker-compose服务中可以通过jdbcmysql//db:3306这个地址来访问db这个mysql服务。 version: '3' services: # 指定服务名称 db: # 指定服务使用的镜像 image: mysql:5.7 # 指定容器名称 container_name: mysql # 指定服务运行的端口 ports: - 3306:3306 # 指定容器中需要挂载的文件 volumes: - /mydata/mysql/log:/var/log/mysql - /mydata/mysql/data:/var/lib/mysql - /mydata/mysql/conf:/etc/mysql # 指定容器的环境变量 environment: - MYSQL_ROOT_PASSWORD=root # 指定服务名称 mall-tiny-docker-compose: # 指定服务使用的镜像 image: mall-tiny/mall-tiny-docker-compose:0.0.1-SNAPSHOT # 指定容器名称 container_name: mall-tiny-docker-compose # 指定服务运行的端口 ports: - 8080:8080 # 指定容器中需要挂载的文件 volumes: - /etc/localtime:/etc/localtime - /mydata/app/mall-tiny-docker-compose/logs:/var/logs ©chesty all right reserved，powered by Gitbook文档更新时间： 2022-07-12 11:27:44 "},"deploy/nacos.html":{"url":"deploy/nacos.html","title":"nacos 注册中心安装","keywords":"","body":"nacos 注册中心安装 提供好了Docker Compose脚本，直接执行即可 version: '3' services: nacos-registry: image: nacos/nacos-server:1.3.0 container_name: nacos-registry environment: - \"MODE=standalone\" ports: - 8848:8848 docker-compose -f docker-compose-env.yml up -d 目前已经发布2.x版本，支持长链接，可以使用自定义数据库操作 ### 设置数据库类型 spring.datasource.platform=mysql ### 数据库的数量，可配置多个数据: db.num=1 ### 数据库连接信息: db.url.0=jdbc:mysql://127.0.0.1:3306/nacos_config?characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true&useUnicode=true&useSSL=false&serverTimezone=UTC db.user.0=nacos_config db.password.0=password 启动命令 解压命令 tar -zxvf ****.tar.gz -C 目录 运行命令centos cd nacos cd bin sh startup.sh -m standalone 运行命令ubuntu cd nacos cd bin bash startup.sh -m standalone 运行命令win startup.cmd -m standalone 设置集群配置 按照上述操作，配置多台（至少三台）Nacos服务后，执行如下命令创建集群配置文件： cp /usr/local/nacos/cluster.conf.example /usr/local/nacos/cluster.conf 将集群节点按如下格式配置在文件中，默认8848端口可不配置 #it is ip # example 192.168.16.101:8847 192.168.16.102 192.168.16.103 官方文档地址 ©chesty all right reserved，powered by Gitbook文档更新时间： 2022-07-12 11:28:18 "},"deploy/java.html":{"url":"deploy/java.html","title":"Java 环境(Linux)","keywords":"","body":"Java 环境(Linux) 官网下载jdk,官网选择下载匹配的版本，如下所示 下载完成后通过 xftp 上传到服务器，执行如下操作（vim 后按 i 开始编辑，esc关闭编辑，输入:wq保存关闭）： vim /etc/profile 最下面加入这段： #java export JAVA_HOME=/usr/local/java/jdk1.8.0_261 export JRE_HOME=${JAVA_HOME}/jre export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib export PATH=${JAVA_HOME}/bin:$PATH 执行这句： mkdir -p /usr/local/java && tar -xzvf jdk-8u261-linux-x64.tar.gz && mv jdk1.8.0_261 /usr/local/java && source /etc/profile 验证是否安装成功 java -version： ©chesty all right reserved，powered by Gitbook文档更新时间： 2022-07-12 11:30:25 "},"elk/":{"url":"elk/","title":"ELK","keywords":"","body":"ELK ©chesty all right reserved，powered by Gitbook文档更新时间： 2022-07-12 11:55:43 "},"elk/es.html":{"url":"elk/es.html","title":"Elasticsearch设置密码","keywords":"","body":"Elasticsearch设置密码 修改Elasticsearch的配置文件并开启X-PACK中的安全功能，该配置文件在安装目录的config文件夹下面，例如elasticsearch-7.6.2\\config\\elasticsearch.yml； http.cors.enabled: true http.cors.allow-origin: \"*\" http.cors.allow-headers: Authorization xpack.security.enabled: true xpack.security.transport.ssl.enabled: true 启动Elasticsearch服务 在bin目录下使用如下命令elasticsearch-setup-passwords interactive修改预置账号的密码，期间需要设置多个账号密码，我都设置成了123456； 期间设置了好几个账号 elastic：超级管理员账号 kibana：Kibana访问专用账号 logstash_system：Logstash访问专用账号 beats_system：FileBeat访问专用账号 apm_system：APM系统专用账号 remote_monitoring_user：远程监控账号 接下来我们需要在Kibana的配置文件中添加可以访问Elasticsearch的账号，该配置文件在安装目录的config文件夹下面，例如kibana-7.6.2\\config\\kibana.yml； elasticsearch.username: \"kibana\" elasticsearch.password: \"123456\" 启动Kibana服务 当Kibana启动完成后，我们访问的时就需要登录认证了，使用超级管理员账号elastic:123456可以进行登录，访问地址：http://localhost:5601 登录成功后，在我们的Management选项中可以找到安全相关的配置，在此我们可以对用户、角色、权限进行设置。 ©chesty all right reserved，powered by Gitbook文档更新时间： 2022-07-12 11:53:07 "},"elk/springboot.html":{"url":"elk/springboot.html","title":"SpringBoot安全访问","keywords":"","body":"SpringBoot安全访问 由于Elasticsearch开启X-PACK中的安全功能，当我们的SpringBoot应用访问Elasticsearch时，也需要设置用户名和密码了！ 我们可以直接在SpringBoot中设置超级管理员账号，但这不是个好办法，我们还是自己建个角色和账号 首先在Kibana中创建一个应用访问专用的角色app_user； 创建一个用户并配置好该角色，账号密码为app:123456； 修改SpringBoot应用的配置文件application.yml，配置好账号密码即可正常访问了 spring: elasticsearch: rest: uris: http://localhost:9200 username: app password: 123456 ©chesty all right reserved，powered by Gitbook文档更新时间： 2022-07-12 11:53:56 "},"elk/filebeat.html":{"url":"elk/filebeat.html","title":"安装filebeat步骤","keywords":"","body":"安装filebeat步骤 地址：https://www.elastic.co/cn/downloads/beats/filebeat curl -L -O https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-7.3.0-linux-x86_64.tar.gz tar zxvf filebeat-7.3.0-linux-x86_64.tar.gz mv filebeat-7.3.0-linux-x86_64.tar.gz filebeat 启动命令 ./filebeat -e -c filebeat.yml 守护进程 ./filebeat -e -c filebeat.yml & 空格 exit 退出才能使守护进程起作用 不记录 filebeat 日志信息的启动方式 nohup ./filebeat -e -c /etc/filebeat/filebeat.yml > /dev/null 2>&1 & 或 nohup ./filebeat -c /etc/filebeat/filebeat.yml -e > /dev/null 2>&1 & Ctrl+d 命令退出. 或 nohup ./filebeat -c /etc/filebeat/filebeat.yml -e & exit 命令退出 记录filebeat 日志 ./filebeat -e -c /etc/filebeat/filebeat.yml > filebeat.log & Ctrl+d 命令退出. 停止 filebeat ps -ef |grep filebeat 查找进程 kill -9 进程号 命令杀死进程 配置文件 multiline.negate: false multiline.match: after paths: - /data/app/mall-app/logs/spring.log/error/*.log fields: index_name: \"app_log\" - type: log enabled: true #不以[开头的行都合并到上一行的末尾 multiline.type: pattern multiline.pattern: '^\\[ multiline.negate: true multiline.match: after paths: - /data/app/mall-admin/logs/spring.log/error/*.log fields: index_name: \"admin_log\" - type: log enabled: true #不以[开头的行都合并到上一行的末尾 multiline.type: pattern multiline.pattern: '^[0-9]{8}' multiline.negate: false multiline.match: after paths: - /data/app/mall-search/logs/spring.log/error/*.log fields: index_name: \"search_log\" # # # 7.x的版本中需要禁用此索引生命周期，否则在指定es索引名字的时候会有问题 setup.ilm.enabled: false setup.template.name: \"***-log\" setup.template.pattern: \"*\" setup.template.enabled: true setup.template.overwrite: false # 输出到es output.elasticsearch: #worker: 1 #bulk_max_size: 1500 hosts: [\"**.**.**.**:9200\"] index: \"log-%{[fields.index_name]}-*\" username: \"elastic\" action: \"index\" codec: json password: \"***\" indices: - index: \"log-web-%{+yyyy.MM.dd}\" when.equals: fields.index_name: \"web_log\" ©chesty all right reserved，powered by Gitbook文档更新时间： 2022-07-12 11:54:41 "}}